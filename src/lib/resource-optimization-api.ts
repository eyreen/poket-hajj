// Resource Optimization API Functions
import { 
  ResourceData,
  ResourceBrain,
  AutoPackageGeneration,
  LogisticsAlert,
  ResourceOptimizationStats,
  AllocationRule,
  DemandForecast
} from '@/types/resource-optimization';

const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api';

// Resource Management
export async function getAllResources(type?: string): Promise<ResourceData[]> {
  const params = type ? `?type=${type}` : '';
  const response = await fetch(`${API_BASE}/admin/resources${params}`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch resources');
  }

  return response.json();
}

export async function getResourceById(resourceId: string): Promise<ResourceData> {
  const response = await fetch(`${API_BASE}/admin/resources/${resourceId}`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch resource');
  }

  return response.json();
}

export async function updateResourceAllocation(
  resourceId: string, 
  allocation: { allocated: number; reserved: number }
): Promise<void> {
  const response = await fetch(`${API_BASE}/admin/resources/${resourceId}/allocation`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(allocation),
  });

  if (!response.ok) {
    throw new Error('Failed to update resource allocation');
  }
}

// Resource Brain & Optimization
export async function getResourceBrainData(): Promise<ResourceBrain> {
  const response = await fetch(`${API_BASE}/admin/resources/brain`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch resource brain data');
  }

  return response.json();
}

export async function triggerOptimization(type: 'capacity' | 'pricing' | 'routing' | 'all'): Promise<void> {
  const response = await fetch(`${API_BASE}/admin/resources/optimize`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ type }),
  });

  if (!response.ok) {
    throw new Error('Failed to trigger optimization');
  }
}

// Auto Package Generation
export async function getAutoGeneratedPackages(status?: string): Promise<AutoPackageGeneration[]> {
  const params = status ? `?status=${status}` : '';
  const response = await fetch(`${API_BASE}/admin/packages/auto-generated${params}`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch auto-generated packages');
  }

  return response.json();
}

export async function approveAutoPackage(packageId: string, officerId: string): Promise<void> {
  const response = await fetch(`${API_BASE}/admin/packages/auto-generated/${packageId}/approve`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ officerId }),
  });

  if (!response.ok) {
    throw new Error('Failed to approve auto-generated package');
  }
}

export async function rejectAutoPackage(packageId: string, reason: string, officerId: string): Promise<void> {
  const response = await fetch(`${API_BASE}/admin/packages/auto-generated/${packageId}/reject`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ reason, officerId }),
  });

  if (!response.ok) {
    throw new Error('Failed to reject auto-generated package');
  }
}

export async function modifyAutoPackage(
  packageId: string, 
  modifications: Partial<AutoPackageGeneration>, 
  officerId: string
): Promise<void> {
  const response = await fetch(`${API_BASE}/admin/packages/auto-generated/${packageId}/modify`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ modifications, officerId }),
  });

  if (!response.ok) {
    throw new Error('Failed to modify auto-generated package');
  }
}

// Demand Forecasting
export async function getDemandForecasts(period?: string): Promise<DemandForecast[]> {
  const params = period ? `?period=${period}` : '';
  const response = await fetch(`${API_BASE}/admin/resources/demand-forecast${params}`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch demand forecasts');
  }

  return response.json();
}

export async function generateDemandForecast(parameters: {
  period: string;
  factors: string[];
  scenarios: boolean;
}): Promise<DemandForecast> {
  const response = await fetch(`${API_BASE}/admin/resources/demand-forecast/generate`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(parameters),
  });

  if (!response.ok) {
    throw new Error('Failed to generate demand forecast');
  }

  return response.json();
}

// Allocation Rules
export async function getAllocationRules(): Promise<AllocationRule[]> {
  const response = await fetch(`${API_BASE}/admin/resources/allocation-rules`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch allocation rules');
  }

  return response.json();
}

export async function createAllocationRule(rule: Partial<AllocationRule>): Promise<AllocationRule> {
  const response = await fetch(`${API_BASE}/admin/resources/allocation-rules`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(rule),
  });

  if (!response.ok) {
    throw new Error('Failed to create allocation rule');
  }

  return response.json();
}

export async function updateAllocationRule(ruleId: string, updates: Partial<AllocationRule>): Promise<void> {
  const response = await fetch(`${API_BASE}/admin/resources/allocation-rules/${ruleId}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updates),
  });

  if (!response.ok) {
    throw new Error('Failed to update allocation rule');
  }
}

export async function toggleAllocationRule(ruleId: string, active: boolean): Promise<void> {
  const response = await fetch(`${API_BASE}/admin/resources/allocation-rules/${ruleId}/toggle`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ active }),
  });

  if (!response.ok) {
    throw new Error('Failed to toggle allocation rule');
  }
}

// Logistics Alerts
export async function getLogisticsAlerts(acknowledged = false): Promise<LogisticsAlert[]> {
  const response = await fetch(`${API_BASE}/admin/resources/alerts?acknowledged=${acknowledged}`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch logistics alerts');
  }

  return response.json();
}

export async function acknowledgeAlert(alertId: string, officerId: string): Promise<void> {
  const response = await fetch(`${API_BASE}/admin/resources/alerts/${alertId}/acknowledge`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ officerId }),
  });

  if (!response.ok) {
    throw new Error('Failed to acknowledge alert');
  }
}

// Statistics and Analytics
export async function getResourceOptimizationStats(): Promise<ResourceOptimizationStats> {
  const response = await fetch(`${API_BASE}/admin/resources/stats`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch resource optimization stats');
  }

  return response.json();
}

export async function getCapacityUtilization(resourceType?: string): Promise<{
  resourceType: string;
  utilization: number;
  trend: number;
  efficiency: number;
}[]> {
  const params = resourceType ? `?type=${resourceType}` : '';
  const response = await fetch(`${API_BASE}/admin/resources/capacity-utilization${params}`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch capacity utilization');
  }

  return response.json();
}

export async function getRevenueOptimization(): Promise<{
  currentRevenue: number;
  potentialRevenue: number;
  optimizationOpportunity: number;
  recommendations: string[];
}> {
  const response = await fetch(`${API_BASE}/admin/resources/revenue-optimization`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch revenue optimization data');
  }

  return response.json();
}

// Real-time Updates
export function subscribeToResourceUpdates(callback: (update: any) => void): () => void {
  const eventSource = new EventSource(`${API_BASE}/admin/resources/stream`);
  
  eventSource.onmessage = (event) => {
    const data = JSON.parse(event.data);
    callback(data);
  };

  return () => {
    eventSource.close();
  };
}

// Bulk Operations
export async function bulkUpdateResources(updates: {
  resourceId: string;
  changes: Partial<ResourceData>;
}[]): Promise<{
  updated: string[];
  failed: string[];
}> {
  const response = await fetch(`${API_BASE}/admin/resources/bulk-update`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ updates }),
  });

  if (!response.ok) {
    throw new Error('Failed to bulk update resources');
  }

  return response.json();
}
