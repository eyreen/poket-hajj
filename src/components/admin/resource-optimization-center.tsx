'use client'

import React, { useState, useEffect } from 'react'
import { 
  Zap, 
  TrendingUp, 
  Package, 
  AlertTriangle, 
  Settings,
  Eye,
  CheckCircle,
  X,
  RefreshCw,
  Filter,
  MoreHorizontal,
  Plane,
  Building,
  MapPin,
  Users
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs'
import { 
  ResourceOptimizationStats,
  AutoPackageGeneration,
  ResourceData,
  LogisticsAlert
} from '@/types/resource-optimization'
import { 
  getResourceOptimizationStats,
  getAutoGeneratedPackages,
  getAllResources,
  getLogisticsAlerts,
  approveAutoPackage,
  rejectAutoPackage,
  triggerOptimization
} from '@/lib/resource-optimization-api'

interface ResourceOptimizationCenterProps {
  className?: string
}

export function ResourceOptimizationCenter({ className }: ResourceOptimizationCenterProps) {
  const [stats, setStats] = useState<ResourceOptimizationStats | null>(null)
  const [autoPackages, setAutoPackages] = useState<AutoPackageGeneration[]>([])
  const [resources, setResources] = useState<ResourceData[]>([])
  const [alerts, setAlerts] = useState<LogisticsAlert[]>([])
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('overview')
  const [optimizing, setOptimizing] = useState(false)

  useEffect(() => {
    loadData()
  }, [])

  const loadData = async () => {
    try {
      setLoading(true)
      const [statsData, packagesData, resourcesData, alertsData] = await Promise.all([
        getResourceOptimizationStats(),
        getAutoGeneratedPackages('active'),
        getAllResources(),
        getLogisticsAlerts()
      ])
      
      setStats(statsData)
      setAutoPackages(packagesData)
      setResources(resourcesData.slice(0, 20)) // Limit for demo
      setAlerts(alertsData)
    } catch (error) {
      console.error('Failed to load resource optimization data:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleOptimize = async (type: 'capacity' | 'pricing' | 'routing' | 'all') => {
    try {
      setOptimizing(true)
      await triggerOptimization(type)
      await loadData() // Refresh data
    } catch (error) {
      console.error('Failed to trigger optimization:', error)
    } finally {
      setOptimizing(false)
    }
  }

  const handleApprovePackage = async (packageId: string) => {
    try {
      await approveAutoPackage(packageId, 'current-officer')
      await loadData() // Refresh data
    } catch (error) {
      console.error('Failed to approve package:', error)
    }
  }

  const handleRejectPackage = async (packageId: string, reason: string) => {
    try {
      await rejectAutoPackage(packageId, reason, 'current-officer')
      await loadData() // Refresh data
    } catch (error) {
      console.error('Failed to reject package:', error)
    }
  }

  const getResourceIcon = (type: string) => {
    switch (type) {
      case 'flight_seat':
        return <Plane className="h-4 w-4" />
      case 'hotel_room':
        return <Building className="h-4 w-4" />
      case 'transport':
        return <MapPin className="h-4 w-4" />
      default:
        return <Package className="h-4 w-4" />
    }
  }

  const getUtilizationColor = (utilization: number) => {
    if (utilization >= 90) return 'bg-red-500'
    if (utilization >= 75) return 'bg-yellow-500'
    if (utilization >= 60) return 'bg-green-500'
    return 'bg-blue-500'
  }

  const getPackageStatusBadge = (status: string) => {
    switch (status) {
      case 'draft':
        return <Badge variant="secondary">Draft</Badge>
      case 'active':
        return <Badge variant="default" className="bg-green-100 text-green-800">Active</Badge>
      case 'paused':
        return <Badge variant="outline">Paused</Badge>
      case 'expired':
        return <Badge variant="destructive">Expired</Badge>
      default:
        return <Badge variant="secondary">{status}</Badge>
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <RefreshCw className="h-8 w-8 animate-spin" />
      </div>
    )
  }

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Resources</CardTitle>
            <Package className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.totalResources || 0}</div>
            <p className="text-xs text-muted-foreground">
              {((stats?.utilizationRate || 0) * 100).toFixed(1)}% utilization
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Revenue Optimization</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">+{((stats?.revenueOptimization || 0) * 100).toFixed(1)}%</div>
            <p className="text-xs text-muted-foreground">
              RM {(stats?.costSavings || 0).toLocaleString()} saved
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Auto Packages</CardTitle>
            <Zap className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.packagesGenerated || 0}</div>
            <p className="text-xs text-muted-foreground">
              {((stats?.automationRate || 0) * 100).toFixed(1)}% automation rate
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Alerts</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{alerts.length}</div>
            <p className="text-xs text-muted-foreground">
              Require attention
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Controls */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Button
            onClick={() => handleOptimize('all')}
            disabled={optimizing}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {optimizing ? (
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Zap className="h-4 w-4 mr-2" />
            )}
            Run AI Optimization
          </Button>
          <Button variant="outline" onClick={() => handleOptimize('capacity')}>
            <Package className="h-4 w-4 mr-2" />
            Optimize Capacity
          </Button>
          <Button variant="outline" onClick={() => handleOptimize('pricing')}>
            <TrendingUp className="h-4 w-4 mr-2" />
            Optimize Pricing
          </Button>
        </div>

        <div className="flex items-center space-x-2">
          <Button variant="outline" size="icon">
            <Filter className="h-4 w-4" />
          </Button>
          <Button variant="outline" onClick={loadData}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
        </div>
      </div>

      {/* Main Content Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="auto-packages">Auto Packages ({autoPackages.length})</TabsTrigger>
          <TabsTrigger value="resources">Resources</TabsTrigger>
          <TabsTrigger value="alerts">Alerts ({alerts.length})</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Resource Utilization Chart */}
          <Card>
            <CardHeader>
              <CardTitle>Resource Utilization</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {['flight_seat', 'hotel_room', 'transport', 'visa'].map((type) => {
                  const utilization = Math.random() * 100 // Mock data
                  return (
                    <div key={type} className="space-y-2">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          {getResourceIcon(type)}
                          <span className="text-sm font-medium capitalize">{type.replace('_', ' ')}</span>
                        </div>
                        <span className="text-sm text-muted-foreground">{utilization.toFixed(1)}%</span>
                      </div>
                      <Progress value={utilization} className="h-2" />
                    </div>
                  )
                })}
              </div>
            </CardContent>
          </Card>

          {/* Recent AI Activities */}
          <Card>
            <CardHeader>
              <CardTitle>Recent AI Activities</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-start space-x-3">
                  <div className="w-2 h-2 rounded-full bg-green-500 mt-2" />
                  <div className="flex-1">
                    <p className="text-sm">Generated "Ramadan Special" package with 50 MAS seats + Hilton rooms</p>
                    <p className="text-xs text-muted-foreground">2 minutes ago</p>
                  </div>
                </div>
                <div className="flex items-start space-x-3">
                  <div className="w-2 h-2 rounded-full bg-blue-500 mt-2" />
                  <div className="flex-1">
                    <p className="text-sm">Optimized pricing for premium packages - 15% increase predicted</p>
                    <p className="text-xs text-muted-foreground">8 minutes ago</p>
                  </div>
                </div>
                <div className="flex items-start space-x-3">
                  <div className="w-2 h-2 rounded-full bg-yellow-500 mt-2" />
                  <div className="flex-1">
                    <p className="text-sm">Alert: Hotel capacity low for Dec 2025 - recommend early booking</p>
                    <p className="text-xs text-muted-foreground">15 minutes ago</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="auto-packages">
          <Card>
            <CardHeader>
              <CardTitle>AI-Generated Packages</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Package</TableHead>
                    <TableHead>Trigger</TableHead>
                    <TableHead>Target Audience</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Performance</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {autoPackages.map((pkg) => (
                    <TableRow key={pkg.id}>
                      <TableCell>
                        <div>
                          <div className="font-medium">{pkg.generatedPackage.name}</div>
                          <div className="text-xs text-muted-foreground">
                            {pkg.generatedPackage.availability.totalSlots} slots available
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline" className="capitalize">
                          {pkg.trigger.type.replace('_', ' ')}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="text-sm">
                          <div>{pkg.targetAudience.estimatedSize} pilgrims</div>
                          <div className="text-xs text-muted-foreground">
                            {(pkg.targetAudience.conversionProbability * 100).toFixed(1)}% conversion
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div>
                          <div className="font-medium">RM {pkg.generatedPackage.pricing.finalPrice.toLocaleString()}</div>
                          {pkg.generatedPackage.pricing.discountPercentage > 0 && (
                            <div className="text-xs text-green-600">
                              -{pkg.generatedPackage.pricing.discountPercentage}% discount
                            </div>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        {getPackageStatusBadge(pkg.status)}
                      </TableCell>
                      <TableCell>
                        <div className="text-sm">
                          <div>{pkg.performance.bookings} bookings</div>
                          <div className="text-xs text-muted-foreground">
                            {(pkg.performance.conversionRate * 100).toFixed(1)}% conversion
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" className="h-8 w-8 p-0">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuLabel>Actions</DropdownMenuLabel>
                            <DropdownMenuItem onClick={() => handleApprovePackage(pkg.id)}>
                              <CheckCircle className="mr-2 h-4 w-4" />
                              Approve & Launch
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Eye className="mr-2 h-4 w-4" />
                              Review Details
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Settings className="mr-2 h-4 w-4" />
                              Modify Package
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <DropdownMenuItem 
                              onClick={() => handleRejectPackage(pkg.id, 'Manual review required')}
                              className="text-red-600"
                            >
                              <X className="mr-2 h-4 w-4" />
                              Reject
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="resources">
          <Card>
            <CardHeader>
              <CardTitle>Resource Inventory</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Resource</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Capacity</TableHead>
                    <TableHead>Utilization</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {resources.map((resource) => (
                    <TableRow key={resource.id}>
                      <TableCell className="flex items-center space-x-2">
                        {getResourceIcon(resource.type)}
                        <div>
                          <div className="font-medium">{resource.provider}</div>
                          <div className="text-xs text-muted-foreground">
                            {resource.location.region}
                          </div>
                        </div>
                      </TableCell>
                      <TableCell className="capitalize">
                        {resource.type.replace('_', ' ')}
                      </TableCell>
                      <TableCell>
                        <div className="text-sm">
                          <div>{resource.capacity.total} total</div>
                          <div className="text-xs text-muted-foreground">
                            {resource.capacity.available} available
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          <div className="w-16 h-2 bg-gray-200 rounded">
                            <div 
                              className={`h-2 rounded ${getUtilizationColor(
                                (resource.capacity.allocated / resource.capacity.total) * 100
                              )}`}
                              style={{ 
                                width: `${(resource.capacity.allocated / resource.capacity.total) * 100}%` 
                              }}
                            />
                          </div>
                          <span className="text-sm">
                            {((resource.capacity.allocated / resource.capacity.total) * 100).toFixed(0)}%
                          </span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div>
                          <div className="font-medium">RM {resource.pricing.currentPrice}</div>
                          {resource.pricing.dynamicPricing && (
                            <Badge variant="secondary" className="text-xs">Dynamic</Badge>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline" className="capitalize">
                          {resource.quality.category}
                        </Badge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="alerts">
          <Card>
            <CardHeader>
              <CardTitle>Logistics Alerts</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {alerts.map((alert) => (
                  <div key={alert.id} className="p-4 border rounded-lg">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start space-x-3">
                        <AlertTriangle className={`h-5 w-5 mt-0.5 ${
                          alert.severity === 'critical' ? 'text-red-500' :
                          alert.severity === 'warning' ? 'text-yellow-500' :
                          'text-blue-500'
                        }`} />
                        <div className="flex-1">
                          <div className="font-medium">{alert.message}</div>
                          <div className="text-sm text-muted-foreground mt-1">
                            Affected: {alert.affectedResources.join(', ')}
                          </div>
                          <div className="text-xs text-muted-foreground">
                            {new Date(alert.timestamp).toLocaleString()}
                          </div>
                        </div>
                      </div>
                      <Badge variant={
                        alert.severity === 'critical' ? 'destructive' :
                        alert.severity === 'warning' ? 'secondary' :
                        'outline'
                      }>
                        {alert.severity}
                      </Badge>
                    </div>
                    {alert.recommendedActions.length > 0 && (
                      <div className="mt-3 p-3 bg-gray-50 rounded">
                        <div className="text-sm font-medium mb-2">Recommended Actions:</div>
                        <ul className="text-sm text-muted-foreground space-y-1">
                          {alert.recommendedActions.map((action, index) => (
                            <li key={index}>• {action}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
